{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/account/account.component.ts","webpack:///src/app/account/account.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/broker/broker.service.ts","webpack:///src/app/class/account.ts","webpack:///src/app/class/client.ts","webpack:///src/app/client/client-list/client-item/client-item.component.ts","webpack:///src/app/client/client-list/client-item/client-item.component.html","webpack:///src/app/client/client-list/client-list.component.ts","webpack:///src/app/client/client-list/client-list.component.html","webpack:///src/app/client/client.component.ts","webpack:///src/app/client/client.component.html","webpack:///src/app/footer/footer.component.ts","webpack:///src/app/footer/footer.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/menu/menu.component.ts","webpack:///src/app/menu/menu.component.html","webpack:///src/app/operation/operation.component.ts","webpack:///src/app/operation/operation.component.html","webpack:///src/app/print-page/print-page.component.ts","webpack:///src/app/print-page/print-page.component.html","webpack:///src/app/services/account.service.ts","webpack:///src/app/services/authentification.service.ts","webpack:///src/app/services/client.service.ts","webpack:///src/app/services/operation.service.ts","webpack:///src/app/state/state.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AccountComponent","fb","auth","accountService","client","account","onGetInfoClient","onGetAll","accountForm","group","accountNumber","required","maxLength","loadInfoClient","getAllAccount","subscribe","data","accountList","console","log","err","value","invalid","save","window","location","reload","saveData","selector","templateUrl","styleUrls","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","authserv","title","isAuthentication","AppModule","declarations","providers","bootstrap","BrokerService","sourceEventSubject","sourceEventSubjectObservable","asObservable","event","next","providedIn","Account","Client","ClientItemComponent","ClientListComponent","DataStateEnum","clientsInput$","ClientComponent","service","broker","clientIn$","onGetAllClients","publishEvent","type","GET_ALL_CLIENTS","actionEvent","onActionEvent","clientForm","firstName","minLength","lastName","emailAdress","email","birtDayDate","phoneNumber","$event","getAllClient","pipe","dataState","LOADED","LOADING","ERROR","errorMessage","message","ADD_CLIENT","reloadCurrentPage","FooterComponent","HomeComponent","onGetAccountClient","getAccount","cmpName","printContents","document","getElementById","innerHTML","originalContents","body","print","onprintInfoCompte","LoginComponent","authServ","router","isAuth","loginForm","clientId","onLogin","resp","saveToken","navigate","MenuComponent","deconexion","OperationComponent","displayErrorMessage","typeOperation","opertationForm","amountOperation","description","beneficiary","getAllOperationClient","operation","PrintPageComponent","display","getAllOperation","onprintHistoriqueCompte","AccountService","http","host","context_path","get","post","idClient","AuthentificationService","observe","token","localStorage","setItem","jwtHelper","obJwt","decodeToken","getItem","role","removeItem","ClientService","OperationService","ActionsTypes","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { BrokerService } from './../broker/broker.service';\nimport { Client } from './../class/client';\nimport { AuthentificationService } from './../services/authentification.service';\nimport { AccountService } from './../services/account.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Account } from '../class/account';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css'],\n})\nexport class AccountComponent implements OnInit {\n  public accountForm: FormGroup;\n  public client: Client = new Client();\n  public account: Account = new Account();\n  public accountList: Account[];\n\n  constructor(\n    private fb: FormBuilder,\n    private auth: AuthentificationService,\n    private accountService: AccountService\n  ) {}\n\n  ngOnInit(): void {\n    this.onGetInfoClient() ;\n    this.onGetAll();\n    this.accountForm = this.fb.group({\n      accountNumber: [\n        '',\n        [\n          Validators.required,\n          Validators.maxLength(10),\n        ],\n      ],\n    });\n\n  }\n\n  onGetInfoClient() {\n    this.client = this.auth.loadInfoClient();\n  }\n\n  onGetAll() {\n    this.accountService.getAllAccount().subscribe(\n      (data) => {\n        this.accountList = data;\n        console.log(data);\n      },\n      (err) => {\n        //traitement d'erreur\n      }\n    );\n  }\n\n  public saveData() {\n    console.log(this.accountForm.value)\n    if (this.accountForm?.invalid) return;\n    this.accountService.save(this.accountForm?.value).subscribe((data) => {\n      console.log(data);\n    },\n      (err) => {\n        //Traitement d'erreur\n      }\n    );\n  }\n\n  reloadCurrentPage() {\n    window.location.reload();\n   }\n}\n","<div class=\"container\">\r\n  <div class=\"row mt-4 mb-4\">\r\n    <h1 style=\"text-align: center;\">GESTION DES COMPTES</h1>\r\n  </div>\r\n  <div class=\"col\">\r\n    <div class=\"col-4 col-md-5 mb-3 mt-3\">\r\n      <form novalidate (ngSubmit)=\"saveData()\" [formGroup]=\"accountForm\">\r\n\r\n        <div class=\"form-group\">\r\n          <input placeholder=\"Numero de compte *\" type=\"text\" class=\"form-control\" id=\"accountNumber\"\r\n            formControlName=\"accountNumber\"\r\n            [ngClass]=\"{'is-invalid': accountForm.get('accountNumber').touched &&!accountForm.get('accountNumber').valid}\">\r\n\r\n          <div class=\"invalid-feedback\">\r\n            <span *ngIf=\"accountForm.get('accountNumber').errors?.required\">\r\n              Entrez le numero de compte du client\r\n            </span>\r\n            <span *ngIf=\"accountForm.get('accountNumber').errors?.maxlength\">\r\n              Maxnimum 10 charactères\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <button type=\"submit\" class=\"btn btn-red\" >Créer </button>\r\n      </form>\r\n\r\n\r\n    </div>\r\n    <div class=\"col-12 col-md-12\">\r\n      <span style=\"text-align: center; margin-top: 2%; margin-bottom: 2%;\">\r\n        <h6>Liste des Comptes</h6>\r\n      </span>\r\n      <table class=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Numero de compte</th>\r\n            <th>IBAN</th>\r\n            <th>RIB</th>\r\n            <th>ACCOUNT TYPE</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let account of accountList\">\r\n            <td>\r\n              {{account.accountNumber}}\r\n            </td>\r\n            <td>\r\n              {{account.iban}}\r\n            </td>\r\n            <td>\r\n              - {{account.rib}}\r\n            </td>\r\n            <td>\r\n              {{account.accountType}}\r\n            </td>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    </div>\r\n  </div>\r\n\r\n","import { PrintPageComponent } from './print-page/print-page.component';\nimport { HomeComponent } from './home/home.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AccountComponent } from './account/account.component';\nimport { OperationComponent } from './operation/operation.component';\nimport { ClientComponent } from './client/client.component';\nimport { LoginComponent } from './login/login.component';\n\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'home', component: HomeComponent },\n  { path: 'account', component: AccountComponent },\n  { path: 'operation', component: OperationComponent },\n  { path: 'client', component: ClientComponent },\n  { path: 'printPage', component: PrintPageComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { AuthentificationService } from './services/authentification.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'bank-account-front';\n   \n  constructor(private authserv: AuthentificationService) {}\n \n  isAuth() {\n    return this.authserv.isAuthentication();\n  }\n}\n","<app-login *ngIf=\"!isAuth()\"></app-login>\n<app-menu *ngIf=\"isAuth()\"></app-menu>\n<router-outlet *ngIf=\"isAuth()\"></router-outlet>\n<router-outlet name=\"print\"></router-outlet>\n<app-footer *ngIf=\"isAuth()\"></app-footer>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MenuComponent } from './menu/menu.component';\nimport { AccountComponent } from './account/account.component';\nimport { OperationComponent } from './operation/operation.component';\nimport { ClientComponent } from './client/client.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport { ClientListComponent } from './client/client-list/client-list.component';\nimport { ClientItemComponent } from './client/client-list/client-item/client-item.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { LoginComponent } from './login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { PrintPageComponent } from './print-page/print-page.component';\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MenuComponent,\n    AccountComponent,\n    OperationComponent,\n    ClientComponent,\n    ClientListComponent,\n    ClientItemComponent,\n    FooterComponent,\n    LoginComponent,\n    HomeComponent,\n    PrintPageComponent,\n  ],\n  imports: [\n    ReactiveFormsModule,\n    FormsModule,\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n   \n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ActionEvent } from '../state/state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrokerService {\n\n  sourceEventSubject:Subject<ActionEvent>=new Subject<ActionEvent>();\n  sourceEventSubjectObservable=this.sourceEventSubject.asObservable();\n\n  //sourceEventSubject2:Subject<ActionEvent>=new Subject<ActionEvent>();\n  //sourceEventSubjectObservable2=this.sourceEventSubject.asObservable();\n\n  publishEvent(event:ActionEvent){\n    this.sourceEventSubject.next(event);\n  }\n}\n","export class Account {\r\n  idClient: number;\r\n  idAccount: number;\r\n  rib: string;\r\n  accountNumber: string;\r\n  iban: string;\r\n  balance: number;\r\n  accountType: string;\r\n  domiciliation: string;\r\n}\r\n","export class Client {\n    id: number;\n    lastName: string;\n    firstName: string;\n    birtDayDate: string;\n    phoneNumber: string;\n    emailAdress: string;\n    accountNumber: number;\n    clientId: number;\n    status:boolean;\n    role:string;\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Client } from 'src/app/class/client';\n\n@Component({\n  selector: 'app-client-item',\n  templateUrl: './client-item.component.html',\n  styleUrls: ['./client-item.component.css']\n})\nexport class ClientItemComponent implements OnInit {\n\n  @Input() client: Client | null = null;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onEdit(client: Client) {\n\n  }\n  onSelect(client: Client) {\n\n  }\n}\n","<tr *ngIf=\"client\">\n    <td>{{client.id}}</td>\n    <td>{{client.firstName}}</td>\n    <td>{{client.lastName}}</td>\n    <td>{{client.birtDayDate}}</td>\n    <td>{{client.accountNumber}}</td>\n    <td>{{client.clientId}}</td>\n    <td>\n      <button (click)=\"onSelect(client)\" [ngClass]=\"client.status?'btn-success':'btn-danger'\" class=\"btn btn-sm\">\n        <span *ngIf=\"client.status\">Anactif</span>\n        <span *ngIf=\"!client.status\">Actif</span>\n      </button>\n    </td>\n    <td>\n      <button class=\"btn btn-danger\" (click)=\"onEdit(client)\">\n        <span class=\"fa fa-edit\">Edit</span>\n      </button>\n    </td>\n  </tr>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AppDataState, DataStateEnum } from 'src/app/state/state';\nimport { Client } from 'src/app/class/client';\n\n@Component({\n  selector: 'app-client-list',\n  templateUrl: './client-list.component.html',\n  styleUrls: ['./client-list.component.css']\n})\nexport class ClientListComponent implements OnInit {\n  @Input() clientsInput$:Observable<AppDataState<Client[]>>;\n  readonly DataStateEnum=DataStateEnum;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    console.log(\"List \" + this.clientsInput$ );\n  }\n\n}\n","\n    <ng-container *ngIf=\"(clientsInput$ | async) as result\" [ngSwitch]=\"result.dataState\" >\n      <ng-container *ngSwitchCase=\"DataStateEnum.LOADING\">\n        Loading .....\n      </ng-container>\n      <ng-container *ngSwitchCase=\"DataStateEnum.ERROR\">\n        <div class=\"alert-danger\">\n          {{result.errorMessage}}\n        </div>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"DataStateEnum.LOADED\">\n        <table class=\"table\">\n          <tr>\n            <th>ID</th><th>FirstName</th><th>LastName</th><th>Date Naissance</th><th>Numéro compte</th><th>Client ID</th><th>Status</th><th>Action</th>\n          </tr>\n          <app-client-item\n            [client]=\"p\"\n            *ngFor=\"let p of result.data\" style=\"display: contents\">\n          </app-client-item>\n        </table>\n      </ng-container>\n    </ng-container>\n\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validator, Validators } from '@angular/forms';\nimport { Client } from '../class/client';\nimport { ClientService } from '../services/client.service';\nimport { BrokerService } from '../broker/broker.service';\nimport { ActionsTypes, AppDataState, DataStateEnum, ActionEvent } from '../state/state';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})\nexport class ClientComponent implements OnInit {\n\n  public clientForm: FormGroup;\n  public client: Client;\n  clientIn$:Observable<AppDataState<Client[]>> |null=null;\n\n\n  constructor(private fb: FormBuilder, private service: ClientService, private broker: BrokerService) { }\n\n  ngOnInit(): void {\n    this.onGetAllClients();\n    this.broker.publishEvent({type: ActionsTypes.GET_ALL_CLIENTS});\n    this.broker.sourceEventSubjectObservable.subscribe((actionEvent: ActionEvent) => {\n      this.onActionEvent(actionEvent);\n    });\n\n    this.clientForm = this.fb.group({\n      firstName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(10)]],\n      lastName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(10)]],\n      emailAdress: ['', [Validators.required, Validators.email]],\n      birtDayDate: '',\n      phoneNumber: '',\n    });\n\n\n  }\n  onActionEvent($event: ActionEvent) {\n    switch ($event.type) {\n      case ActionsTypes.GET_ALL_CLIENTS: this.onGetAllClients();break;\n    }\n  }\n  onGetAllClients() {\n    this.clientIn$=this.service.getAllClient().pipe(\n      map(data=>{\n        return ({dataState:DataStateEnum.LOADED,data:data})\n      }),\n      startWith({dataState:DataStateEnum.LOADING}),\n      catchError(err=>of({dataState:DataStateEnum.ERROR, errorMessage:err.message}))\n    );\n  }\n\n  public saveData() {\n    if (this.clientForm?.invalid) return;\n    this.service.save(this.clientForm?.value)\n      .subscribe(data => {\n        this.onGetAllClients;\n        this.broker.publishEvent({ type: ActionsTypes.ADD_CLIENT });\n      });\n      this.onGetAllClients;\n  }\n\n  reloadCurrentPage() {\n    window.location.reload();\n   }\n}\n\n\n","<div class=\"container\">\n  <div class=\"row mt-4 mb-4\">\n    <h1 style=\"text-align: center;\">CLIENT</h1>\n  </div>\n    <div class=\"col\">\n        <div class=\"col-4 col-md-5 mb-3 mt-3\">\n            <form novalidate (ngSubmit)=\"saveData()\" [formGroup]=\"clientForm\">\n\n                <div class=\"form-group\">\n                    <input placeholder=\"Prénom *\" type=\"text\" class=\"form-control\" id=\"firstname\"\n                        formControlName=\"firstName\" [ngClass]=\"{'is-invalid': clientForm.get('firstName').touched &&!clientForm.get('firstName').valid}\">\n\n                    <div class=\"invalid-feedback\">\n                        <span *ngIf=\"clientForm.get('firstName').errors?.required\">\n                            Entrez votre nom\n                        </span>\n                        <span *ngIf=\"clientForm.get('firstName').errors?.maxlength\">\n                            Maxnimum 10 charactères\n                        </span>\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <input type=\"text\" placeholder=\"Nom * \" class=\"form-control\" id=\"lastname\" formControlName=\"lastName\"\n                        [ngClass]=\"{'is-invalid': clientForm.get('lastName').touched && !clientForm.get('lastName').valid }\">\n\n                    <div class=\"invalid-feedback\">\n                        <span *ngIf=\"clientForm.get('lastName').errors?.required\">\n                            Entrez votre nom\n                        </span>\n                        <span *ngIf=\"clientForm.get('lastName').errors?.minlength\">\n                            Minimum 2 charactères\n                        </span>\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <input type=\"email\" placeholder=\"Email *\" class=\"form-control\" id=\"email\"\n                        formControlName=\"emailAdress\" [ngClass]=\"{'is-invalid': clientForm.get('emailAdress').touched && !clientForm.get('emailAdress').valid}\">\n\n                    <div class=\"invalid-feedback\">\n                        <span *ngIf=\"clientForm.get('emailAdress').errors?.required\">\n                            Entrez  l'e-mail du client\n                        </span>\n                        <span *ngIf=\"clientForm.get('emailAdress').errors?.email\">\n                            L'e-mail client n'est pas valide\n                        </span>\n                    </div>\n                </div>\n\n\n                <div class=\"form-group\">\n                    <input type=\"email\" placeholder=\"Téléphone *\" class=\"form-control\" id=\"email\"\n                        formControlName=\"phoneNumber\" [ngClass]=\"{'is-invalid': clientForm.get('phoneNumber').touched && !clientForm.get('phoneNumber').valid}\">\n                    <div class=\"invalid-feedback\">\n                        <span *ngIf=\"clientForm.get('phoneNumber').errors?.required\">\n                            Veuillez entrer le numéro de télephone du client.\n                        </span>\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <input type=\"date\" placeholder=\"Date Naissance\" class=\"form-control\" id=\"date\"\n                        formControlName=\"birtDayDate\">\n                </div>\n\n\n                <button type=\"submit\" class=\"btn btn-red\" (click)=\"reloadCurrentPage()\" >Enregistrer</button>\n            </form>\n\n\n        </div>\n        <div class=\"col-12 col-md-12\">\n            <app-client-list [clientsInput$]=\"clientIn$\"></app-client-list>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n      <div class=\"footer\">\n        <div class=\"container\">\n          <div class=\"row\">\n          </div>\n        </div>\n      </div>\n      <footer class=\"footer\">\n        <div class=\"container\">\n          <div class=\"row align-items-center flex-row-reverse\">\n            <div class=\"col-auto ml-lg-auto\">\n              <div class=\"row align-items-center\">\n                <div class=\"col-auto\">\n                  <ul class=\"list-inline list-inline-dots mb-0\">\n                    <li class=\"list-inline-item\"><a href=\"#\">Documentation</a></li>\n                    <li class=\"list-inline-item\"><a href=\"#\">FAQ</a></li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-12 col-lg-auto mt-3 mt-lg-0 text-center\">\n              Copyright © 2021 <a href=\"..\"> Bank Account</a> <a href=\"#\" target=\"_blank\"></a> All rights reserved.\n            </div>\n          </div>\n        </div>\n      </footer>\n","import { AccountService } from './../services/account.service';\nimport { AuthentificationService } from './../services/authentification.service';\nimport { Account } from './../class/account';\nimport { Client } from './../class/client';\n\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  public client:Client = new Client();\n  public account: Account = new Account();\n\n  constructor(private auth:AuthentificationService, private accountService:AccountService) { }\n\n  ngOnInit(): void {\n    this.onGetAccountClient();\n  }\n\n\n  onGetAccountClient() {\n    this.client = this.auth.loadInfoClient();\n    this.accountService.getAccount(this.client.id).subscribe(\n      (data) => {\n        this.account = data;\n      },\n      (err) => {\n        //traitement d'erreur\n      }\n    );\n  }\n\n  onprintInfoCompte(cmpName) {\n\n    let printContents = document.getElementById(cmpName).innerHTML;\n    let originalContents = document.body.innerHTML;\n    document.body.innerHTML = printContents;\n    window.print();\n    document.body.innerHTML = originalContents;\n}\n\n}\n","<button type=\"submit\" class=\"btn btn-red ml-2 mb-4 mt-4\" (click)=\"onprintInfoCompte('infoAccount')\">\n  Print\n</button>\n\n<div class=\"container mb-5 mt-5\" id=\"infoAccount\">\n    <div class=\"row mb-3\">\n        <div class=\"col-12\">\n            <div class=\"h-5 bg-gray-lighter rounded\" style=\"text-align: center;\">INFORMATION COMPTE CLIENT</div>\n        </div>\n    </div>\n    <div class=\"row mb-3\">\n        <div class=\"col-6\">\n            <div class=\"h-5 bg-gray-lighter rounded\"> NOM : {{client.lastName}}</div>\n        </div>\n        <div class=\"col-6\">\n            <div class=\"h-5 bg-gray-lightest rounded\">PRENOM : {{client.firstName}}</div>\n        </div>\n    </div>\n    <div class=\"row mb-3\">\n        <div class=\"col-4\">\n            <div class=\"h-5 bg-gray-lighter rounded\">RIB :  {{account.rib}}</div>\n        </div>\n        <div class=\"col-4\">\n            <div class=\"h-5 bg-gray-lightest rounded\">IBAN : {{account.iban}}</div>\n        </div>\n        <div class=\"col-4\">\n            <div class=\"h-5 bg-gray-lighter rounded\">NUMERO DE COMPTE : {{account.accountNumber}}</div>\n        </div>\n    </div>\n    <div class=\"row mb-3\">\n        <div class=\"col-3\">\n            <div class=\"h-5 bg-gray-lighter rounded\">CLIENT ID : {{client.clientId}}</div>\n        </div>\n        <div class=\"col-3\">\n            <div class=\"h-5 bg-gray-lightest rounded\">TELEPHONE : {{client.phoneNumber}}</div>\n        </div>\n        <div class=\"col-3\">\n            <div class=\"h-5 bg-gray-lighter rounded\">EMAIL : {{client.emailAdress}}</div>\n        </div>\n        <div class=\"col-3\">\n            <div class=\"h-5 bg-gray-lightest rounded\">DATE NAISSANCE : {{client.birtDayDate}}</div>\n        </div>\n    </div>\n</div>\n","import { AccountService } from './../services/account.service';\nimport { Account } from './../class/account';\nimport { BrokerService } from './../broker/broker.service';\nimport { ClientService } from './../services/client.service';\nimport { Client } from './../class/client';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { AuthentificationService } from '../services/authentification.service';\nimport { Router } from '@angular/router';\nimport { ActionsTypes } from '../state/state';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  public loginForm: FormGroup;\n  public isAuth: boolean = true;\n  private account: Account = new Account();\n\n  constructor(\n    private authServ: AuthentificationService,\n    private router: Router,\n    private fb: FormBuilder,\n    private service: ClientService,\n    private accountService: AccountService,\n    private broker :BrokerService\n  ) {}\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      accountNumber: ['', [Validators.required, Validators.maxLength(10)]],\n      clientId: ['', [Validators.required, Validators.maxLength(10)]],\n    });\n  }\n\n  onLogin() {\n    if (this.loginForm?.invalid) return;\n    this.authServ.onLogin(this.loginForm?.value).subscribe(\n      (resp) => {\n        this.authServ.saveToken(resp.body);\n        this.isAuth = false;\n        this.router.navigate(['/operation']);\n      },\n      (err) => {\n        //Traitement des erreurs\n        //Acitve war message\n      },\n      () => {\n        //Recupération des infos du compte si l'authentification es ok\n      //  this.onGetAccountClient();\n      }\n    );\n  }\n\n}\n","<body class=\"\" *ngIf=\"isAuth\">\n    <div class=\"page\">\n        <div class=\"page-single\">\n            <div class=\"container\">\n                <div class=\"row\">\n\n                    <div class=\"col col-login mx-auto\">\n\n                        <div class=\"text-center \">\n                            <img src=\"assets/logo/sg.jpg\"  alt=\"SG\">\n                        </div>\n\n                        <form  (ngSubmit)=\"onLogin()\" [formGroup]=\"loginForm\">\n\n                            <div class=\"card-body p-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"form-label\">Account Number</label>\n                                    <input name=\"accountNumber\" type=\"text\" class=\"form-control\" id=\"accountNumber\"\n                                    autocomplete=\"false\" placeholder=\"Account Numbe\" formControlName=\"accountNumber\"\n                                    [ngClass]=\"{'is-invalid':loginForm.get('accountNumber').touched && !loginForm.get('accountNumber').valid}\">\n                                    <div class=\"invalid-feedback\">\n                                      <span *ngIf=\"loginForm.get('accountNumber').errors?.required\">\n                                          Entrez votre numéro de compte\n                                      </span>\n                                      <span *ngIf=\"loginForm.get('accountNumber').errors?.maxlength\">\n                                          Maxnimum 10 charactères\n                                      </span>\n                                  </div>\n                                </div>\n\n                                <div class=\"form-group\">\n                                    <label class=\"form-label\"> Client ID </label>\n                                    <input name=\"clientId\" type=\"password\" class=\"form-control\" id=\"clientId\" autocomplete=\"false\"\n                                    placeholder=\"Client ID\" formControlName=\"clientId\"\n                                    [ngClass]=\"{'is-invalid':loginForm.get('clientId').touched && !loginForm.get('clientId').valid}\">\n\n                                    <div class=\"invalid-feedback\">\n                                      <span *ngIf=\"loginForm.get('clientId').errors?.required\">\n                                          Entrez votre Id client\n                                      </span>\n                                      <span *ngIf=\"loginForm.get('clientId').errors?.maxlength\">\n                                          Maxnimum 10 charactères\n                                      </span>\n                                  </div>\n\n                                </div>\n\n                                <div class=\"form-footer\">\n                                    <button type=\"submit\" class=\"btn btn-red btn-block\">Sign in</button>\n                                </div>\n\n\n                            </div>\n                        </form>\n\n\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n\n","import { AuthentificationService } from './../services/authentification.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Client } from '../class/client';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent implements OnInit {\n\n  public client: Client;\n\n  constructor(private auth:AuthentificationService) { }\n\n  ngOnInit(): void {\n    this.client=this.auth.loadInfoClient();\n  }\n\n  public deconexion(){\n    this.auth.deconexion();\n  }\n\n}\n","<div class=\"header py-4\">\n  <div class=\"container\">\n    <div class=\"d-flex\">\n      <a class=\"header-brand\" routerLink=\"/home\">\n        <img src=\"assets/logo/sg.jpg\" alt=\"SG\">\n      </a>\n      <div class=\"d-flex order-lg-2 ml-auto\">\n        <div class=\"dropdown\">\n          <a href=\"#\" class=\"nav-link pr-0 leading-none\" data-toggle=\"dropdown\">\n            <span class=\"ml-2 d-none d-lg-block\">\n              <span class=\"text-default\" style=\"color: black; font-weight: bold;\"> {{client.firstName}} | {{client.lastName}}</span>\n              <small class=\"text-muted d-block mt-1\">Account Number : {{client.accountNumber}}</small>\n            </span>\n          </a>\n          <a href=\"#\" (click)=\"deconexion()\" title=\"Deconexion\" >\n            <img src=\"assets/images/logout/gnome_session_logout.png\"  alt=\"Deconexion\">\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"header collapse d-lg-flex p-0\" id=\"headerMenuCollapse\">\n  <div class=\"container\">\n    <div class=\"row align-items-center\">\n      <div class=\"col-lg-3 ml-auto\">\n        <form class=\"input-icon my-3 my-lg-0\">\n          <input type=\"search\" class=\"form-control header-search\" placeholder=\"Search&hellip;\" tabindex=\"1\">\n          <div class=\"input-icon-addon\">\n            <i class=\"fe fe-search\"></i>\n          </div>\n        </form>\n      </div>\n      <div class=\"col-lg order-lg-first\">\n        <ul class=\"nav nav-tabs border-0 flex-column flex-lg-row\">\n          <li class=\"nav-item\">\n            <a routerLink='/home' class=\"nav-link\" style=\"color: red;\"><i class=\"fe fe-home\"></i> Home</a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" routerLink='/operation' data-toggle=\"dropdown\">\n              <i class=\"fe fe-box\"></i> Opérations\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" routerLink='/client'>\n              <i class=\"fe fe-box\"></i> Clients\n            </a>\n          </li>\n        <!--   <li class=\"nav-item\">\n            <a class=\"nav-link\" routerLink='/client'>\n              <i class=\"fe fe-box\"></i> Beneficiare\n            </a>\n          </li> -->\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" routerLink='/account'>\n              <i class=\"fe fe-box\"></i> Account\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n","import { AccountService } from './../services/account.service';\nimport { Client } from 'src/app/class/client';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { OperationService } from './../services/operation.service';\nimport { AuthentificationService } from './../services/authentification.service';\nimport { Expression } from '@angular/compiler';\nimport { Component, OnInit } from '@angular/core';\nimport { BrokerService } from '../broker/broker.service';\nimport { ActionsTypes } from '../state/state';\nimport { Operation } from '../class/operation';\nimport { Router } from '@angular/router';\nimport { Account } from '../class/account';\n\n@Component({\n  selector: 'app-operation',\n  templateUrl: './operation.component.html',\n  styleUrls: ['./operation.component.css'],\n})\nexport class OperationComponent implements OnInit {\n  public opertationForm: FormGroup;\n  public client: Client = new Client();\n  public operation: any;\n  public account: Account = new Account();\n  displayErrorMessage: boolean = false;\n  typeOperation: string = 'CREDIT';\n\n  constructor(\n    private fb: FormBuilder,\n    private auth: AuthentificationService,\n    private service: OperationService,\n    private broker: BrokerService,\n    private router: Router,\n    private accountService: AccountService\n  ) {}\n\n  ngOnInit(): void {\n\n    this.onGetAccountClient();\n\n    this.opertationForm = this.fb.group({\n      type: ['', [Validators.required]],\n      amountOperation: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(1),\n          Validators.maxLength(10),\n        ],\n      ],\n      accountNumber: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(5),\n          Validators.maxLength(10),\n        ],\n      ],\n      description: ['', [Validators.required, Validators.maxLength(40)]],\n      beneficiary: '',\n    });\n  }\n\n  public saveData() {\n    if (this.opertationForm?.invalid) return;\n    this.service.save(this.opertationForm?.value).subscribe(\n      (data) => {\n        this.broker.publishEvent({ type: ActionsTypes.ADD_CLIENT });\n      },\n      (err) => {\n        console.log(' AuthentificationService KO   ' + err.message);\n      }\n    );\n  }\n\n  onGetAccountClient() {\n    this.client = this.auth.loadInfoClient();\n    this.accountService.getAccount(this.client.id).subscribe(\n      (data) => {\n        this.account = data;\n      },\n      (err) => {\n        //traitement d'erreur\n      },\n      () => {\n        this.getAllOperationClient(this.account.accountNumber);\n      }\n    );\n  }\n\n  public getAllOperationClient(accountNumber) {\n    this.service.getAllOperationClient(accountNumber).subscribe(\n      (data) => {\n        this.operation = data;\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n  reloadCurrentPage() {\n    window.location.reload();\n  }\n}\n","<div class=\"container\">\n  <div class=\"row mt-4 mb-4\">\n    <div class=\"row \" style=\"color: red;font-weight: bold;\">Votre solde est :{{account.balance}} €</div>\n    <h1 style=\"text-align: center;\">OPERATIONS</h1>\n  </div>\n  <div class=\"col\">\n    <div class=\"col-sm-5\">\n      <form (ngSubmit)=\"saveData()\" [formGroup]=\"opertationForm\">\n        <div class=\"form-group\">\n          <div class=\"form-label\">Type Opération</div>\n          <div class=\"custom-switches-stacked\">\n            <label class=\"custom-switch\">\n              <input type=\"radio\" name=\"type\" value=\"CREDIT\" [(ngModel)]=\"typeOperation\" formControlName=\"type\"\n                class=\"custom-switch-input\" checked>\n              <span class=\"custom-switch-indicator\"></span>\n              <span class=\"custom-switch-description\">Dépot</span>\n            </label>\n            <label class=\"custom-switch\">\n              <input type=\"radio\" name=\"type\" value=\"DEBIT\" [(ngModel)]=\"typeOperation\" formControlName=\"type\"\n                class=\"custom-switch-input\">\n              <span class=\"custom-switch-indicator\"></span>\n              <span class=\"custom-switch-description\">Retrait</span>\n            </label>\n            <label class=\"custom-switch\">\n              <input type=\"radio\" name=\"type\" value=\"TRANSFERT\" [(ngModel)]=\"typeOperation\" formControlName=\"type\"\n                class=\"custom-switch-input\">\n              <span class=\"custom-switch-indicator\"></span>\n              <span class=\"custom-switch-description\">Virement</span>\n            </label>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"amountOperation\">Montant:</label>\n          <input type=\"number\" class=\"form-control\" id=\"amountOperation\" name=\"amountOperation\"\n            formControlName=\"amountOperation\"\n            [ngClass]=\"{'is-invalid':opertationForm.get('amountOperation').touched && !opertationForm.get('amountOperation').valid}\">\n          <div class=\"invalid-feedback\">\n            <span *ngIf=\"opertationForm.get('amountOperation').errors?.required\">\n              Entrez le montant\n            </span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"accountNumber\">Numéro Compte à Débiter:</label>\n          <input type=\"text\" class=\"form-control\" id=\"pwd\" name=\"aaccountNumber\" formControlName=\"accountNumber\"\n            [ngClass]=\"{'is-invalid':opertationForm.get('accountNumber').touched && !opertationForm.get('accountNumber').valid}\">\n          <div class=\"invalid-feedback\">\n            <span *ngIf=\"opertationForm.get('accountNumber').errors?.required\">\n              Entrez votre numéro de compte\n            </span>\n            <span *ngIf=\"opertationForm.get('accountNumber').errors?.maxlength\">\n              Maxnimum 10 charactères\n            </span>\n          </div>\n        </div>\n         <div class=\"form-group\" *ngIf=\"typeOperation=='TRANSFERT'\">\n          <label for=\"account-cred\">Numéro Compte à Créditer:</label>\n          <input type=\"text\" placeholder=\"Pas opérationnel\" class=\"form-control\" id=\"pwd\" name=\"account-cred\" formControlName=\"beneficiary\">\n        </div>\n\n\n        <div>\n          <label for=\"description\">Description</label>\n          <input type=\"text\" class=\"form-control\" id=\"description\" name=\"description\" formControlName=\"description\"\n            [ngClass]=\"{'is-invalid':opertationForm.get('description').touched && !opertationForm.get('description').valid}\">\n\n          <div class=\"invalid-feedback\">\n            <span *ngIf=\"opertationForm.get('description').errors?.required\">\n              Entrez une description de l'opération\n            </span>\n            <span *ngIf=\"opertationForm.get('description').errors?.maxlength\">\n              Maxnimum 40 charactères\n            </span>\n          </div>\n        </div>\n        <br>\n        <button type=\"submit\" class=\"btn btn-red\" (click)=\"reloadCurrentPage()\"   >Valider</button>\n        <button type=\"submit\" class=\"btn btn-red ml-2\">\n          <a routerLink=\"/printPage\" style=\"color: white;text-decoration: none;\"> Print </a>\n        </button>\n      </form>\n    </div>\n    <div>\n      <span style=\"text-align: center; margin-top: 2%; margin-bottom: 2%;\">\n        <h6>Liste Opérations</h6>\n      </span>\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Opération</th>\n            <th>Crédit</th>\n            <th>Débit</th>\n            <th>Balance</th>\n            <th>Date</th>\n\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let op of operation\">\n            <td>\n              {{op.description}}\n            </td>\n            <td style=\"color:green; font-weight: bold;\">\n              {{op.creditAmount}}\n            </td>\n            <td style=\"color: red; font-weight: bold;\">\n              - {{op.debitAmount}}\n            </td>\n            <td>\n              {{op.balance}}\n            </td>\n            <td>\n              {{op.dateOperation}}\n            </td>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n","import { AccountService } from './../services/account.service';\nimport { AuthentificationService } from './../services/authentification.service';\nimport { Client } from './../class/client';\n\nimport { OperationService } from './../services/operation.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Account } from '../class/account';\n\n@Component({\n  selector: 'app-print-page',\n  templateUrl: './print-page.component.html',\n  styleUrls: ['./print-page.component.css'],\n})\nexport class PrintPageComponent implements OnInit {\n  public operation: any;\n  public display: boolean = false;\n  public client: Client = new Client();\n  public account:Account = new Account();\n\n  constructor(\n    private service: OperationService,\n    private auth: AuthentificationService,\n    private accountService: AccountService\n  ) {}\n\n  ngOnInit(): void {\n    this.onGetAccountClient();\n  }\n\n\n\n  onGetAccountClient() {\n    this.client = this.auth.loadInfoClient();\n    this.accountService.getAccount(this.client.id).subscribe(\n      (data) => {\n        this.account = data;\n      },\n      (err) => {\n        //traitement d'erreur\n      },()=>{\n        this.getAllOperation(this.account.accountNumber);\n        console.log(this.account.accountNumber + \"Accc\")\n      }\n    );\n  }\n\n  public getAllOperation(accountNumber: string) {\n    this.service.getAllOperationClient(accountNumber).subscribe(\n      (data) => {\n        this.operation = data;\n        console.log(data + \"data\")\n        console.log(this.operation + \"Operation\")\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n  onprintHistoriqueCompte(cmpName) {\n    this.display = false;\n    let printContents = document.getElementById(cmpName).innerHTML;\n    let originalContents = document.body.innerHTML;\n    document.body.innerHTML = printContents;\n    window.print();\n    document.body.innerHTML = originalContents;\n  }\n}\n","<div class=\"row mb-4 mt-4\" >\n  <div class=\"col-6\">\n    <button type=\"submit\" class=\"btn btn-red mb-4\">\n      <a routerLink=\"/operation\" style=\"color: white;text-decoration: none;\"> Nouvelle Opération</a>\n    </button>\n    <button type=\"submit\" class=\"btn btn-red ml-2 mb-4\" (click)=\"onprintHistoriqueCompte('historique')\">\n      Print\n    </button>\n  </div>\n</div>\n<div class=\"container\" id=\"historique\">\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <p class=\"h3\">SOCIETE GENERALE</p>\n      <address>\n        Street Address:<br>\n        State, City:<br>\n        Region, Postal Code:<br>\n        ltd@sg.com\n      </address>\n    </div>\n    <div class=\"col-6 text-end\">\n      <p class=\"h3\">Client</p>\n      <address>\n        Name<br>\n        Account Number <br>\n        Street Address<br>\n        State, City<br>\n        Region, Postal Code<br>\n        ctr@example.com\n      </address>\n    </div>\n  </div>\n  <div style=\"text-align: center;\">\n\n    <h3>HISTORIQUE COMPTE</h3>\n\n  </div>\n  <br />\n  <form>\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>Description</th>\n          <th>Crédit</th>\n          <th>Débit</th>\n          <th>Balance</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let op of operation\">\n          <td>\n            {{op.description}}\n          </td>\n          <td style=\"color:green; font-weight: bold;\">\n            {{op.creditAmount}}\n          </td>\n          <td style=\"color: red; font-weight: bold;\">\n            - {{op.debitAmount}}\n          </td>\n          <td>\n            {{op.balance}}\n          </td>\n          <td>\n            {{op.dateOperation}}\n          </td>\n      </tbody>\n    </table>\n  </form>\n</div>\n","import { Observable } from 'rxjs';\nimport { Account } from './../class/account';\nimport { environment } from './../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  host: string;\n  context_path: string;\n  constructor(private http: HttpClient) {\n    this.host = environment.host;\n    this.context_path = environment.context_path;\n  }\n\n\n  getAllAccount(): Observable<Account[]> {\n    return this.http.get<Account[]>(this.host + this.context_path + \"/account\");\n  }\n  save(account: Account): Observable<Account> {\n    return this.http.post<Account>(this.host + this.context_path + \"/account\", account);\n  }\n  getAccount(idClient: number): Observable<Account> {\n    return this.http.get<Account>(this.host + this.context_path + \"/account/\" + idClient);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { JwtHelperService } from \"@auth0/angular-jwt\"\nimport { HttpClient } from '@angular/common/http';\nimport { Client } from '../class/client';\nimport { environment } from 'src/environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthentificationService {\n\n jwt: string;\n client: Client;\n host:string;\n\n  constructor(private http: HttpClient) {\n    this.host = environment.auth;\n  }\n\n\n  onLogin(data) {\n   return this.http.post(this.host, data, { observe: 'response' });\n  }\n\n  saveToken(token: any) {\n    localStorage .setItem('token', token);\n  }\n\n\n   loadInfoClient(): Client {\n    const jwtHelper = new JwtHelperService();\n    this.client = new Client;\n     // decode JWT\n    const obJwt = jwtHelper.decodeToken(localStorage.getItem('token'));\n\n    this.client.id = obJwt.id;\n    this.client.accountNumber = obJwt.accountNumber;\n    this.client.firstName = obJwt.firstName;\n    this.client.lastName = obJwt.lastName;\n    this.client.phoneNumber = obJwt.phoneNumber;\n    this.client.clientId = obJwt.clientId;\n    this.client.emailAdress = obJwt.emailAdress;\n    this.client.birtDayDate = obJwt.birtDayDate;\n    this.client.clientId = obJwt.clientId;\n    this.client.role = obJwt.role;\n\n    return this.client;\n  }\n\n  isAuthentication() {\n    if (localStorage.getItem('token') != null) {\n      return true;\n    }\n    return false ;\n  }\n\n  deconexion() {\n    localStorage.removeItem('token');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Client } from '../class/client';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n  host: string;\n  context_path: string;\n  constructor(private http: HttpClient) {\n    this.host = environment.host;\n    this.context_path = environment.context_path;\n  }\n\n\n  getAllClient(): Observable<Client[]> {\n    return this.http.get<Client[]>(this.host + this.context_path + \"/client/all\");\n  }\n  save(client: Client): Observable<Client> {\n    return this.http.post<Client>(this.host + this.context_path + \"/client\", client);\n  }\n  getClient(id: number): Observable<Client> {\n    return this.http.get<Client>(this.host + this.context_path + \"/client/\" + id);\n  }\n\n}\n","import { Account } from './../class/account';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { Operation } from '../class/operation';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OperationService {\n\n  host: string;\n  context_path: string;\n\n  constructor(private http: HttpClient) {\n    this.host = environment.host;\n    this.context_path = environment.context_path;\n  }\n\n  getAllOperationClient(accountNumber:string): Observable<Operation[]> {\n    return this.http.get<Operation[]>(this.host + this.context_path + \"/operation/\" + accountNumber);\n  }\n  save(operation: Operation): Observable<Operation> {\n    return this.http.post<Operation>(this.host + this.context_path + \"/operation\", operation);\n  }\n  getOperation(id: number): Observable<Operation> {\n    return this.http.get<Operation>(this.host + this.context_path + \"/operation/\" + id);\n  }\n}\n","\nexport enum ActionsTypes{\n    GET_ALL_CLIENTS=\"[Client] Get All clients\",\n    GET_SELECTED_CLIENT=\"[Client] Get Selected client\",\n    NEW_CLIENT=\"[Client] New client\",\n    ADD_CLIENT=\"[Client] New client\",\n    INFO_ACCOUNT =\"[Account] New Account\"\n  }\n\n  export interface ActionEvent {\n    type:ActionsTypes,\n    payload?:any\n  }\n  export enum DataStateEnum {\n    LOADING,\n    LOADED,\n    ERROR\n  }\n\n  export interface AppDataState<T> {\n    dataState:DataStateEnum,\n    data?:T,\n    errorMessage?:string\n  }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  host:\"http://localhost:8080\",\n  auth:\"http://localhost:8080/login\",\n  context_path:\"/api/v1\",\n};\n\n\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}